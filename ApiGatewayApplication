package com.rawan.apigateway;

import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;
import org.springframework.cloud.client.discovery.EnableDiscoveryClient;
import org.springframework.cloud.gateway.route.RouteLocator;
import org.springframework.cloud.gateway.route.builder.RouteLocatorBuilder;
import org.springframework.context.annotation.Bean;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import reactor.core.publisher.Mono;

@SpringBootApplication
@EnableDiscoveryClient
@RestController
public class ApiGatewayApplication {

	public static void main(String[] args) {
		SpringApplication.run(ApiGatewayApplication.class, args);
	}

	@Bean
	public RouteLocator myRoutes(RouteLocatorBuilder builder) {
		return builder.routes()
				.route(p -> p.path("/get")
						.filters(f -> f.addRequestHeader("Hello", "World")
								.addRequestParameter("FirstName", "Rawan")
								.addRequestParameter("LastName", "Gedeon"))
						.uri("http://httpbin.org:80"))
				.route(p -> p
						.path("/api/v1/suppliers/**")
						.filters(f -> f.circuitBreaker(config -> config
								.setName("mycmd")
								.setFallbackUri("forward:/fallback")))
						.uri("lb://supplier-service"))
				.route(p -> p
						.path("/bank-account/**")
						.uri("lb://bank-account-service"))
				.route(p -> p
						.path("/cart/**")
						.uri("lb://cart-service"))
				.route(p -> p
						.path("/cart-item/**")
						.uri("lb://cart-item-service"))
				.route(p -> p
						.path("/api/v1/{catId}/products")
						.uri("lb://cat-prod-service"))
				.route(p -> p
						.path("/api/v1/{catId}/products/{prodId}")
						.uri("lb://cat-prod-service"))
				.route(p -> p
						.path("/api/v1/roles/**")
						.uri("lb://role-service"))
				.route(p -> p
						.path("/api/v1/mainusers/**")
						.uri("lb://mainuser-service"))
				.route(p -> p
						.path("/api/v1/orders/**")
						.uri("lb://order-service"))
				.route(p -> p
						.path("/api/v1/orderproducts/**")
						.uri("lb://order-product-service"))
				.route(p -> p
						.path("/api/v1/products/**")
						.uri("lb://product-service"))
				.build();

	}

	@RequestMapping("/fallback")
	public Mono<String> fallback() {
		return Mono.just("A problem has occurred, please try again later.");
	}
}
